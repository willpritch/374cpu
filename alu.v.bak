
module alu(
	input [4:0] ops,
	input [31:0] A, B,
	output [63:0] Zregin;
);

reg [63:0] q;

adder adder(A, B, addresult);
//NEED TO IMPLEMENT ADD, OR, SUB, MUL, DIV, SHR, SHRA, SHL, ROR, ROL, NEG, NOT

always @* begin
	case(ops)
		5'b00000: q = addresult;
//		5'b00001: q = bmi_1; 
//		5'b00010: q = bmi_2;
//		5'b00011: q = bmi_3;
//		5'b00100: q = bmi_4;
//		5'b00101: q = bmi_5;
//		5'b00110: q = bmi_6;
//		5'b00111: q = bmi_7;
//		5'b01000: q = bmi_8;
//		5'b01001: q = bmi_9;
//		5'b01010: q = bmi_10;
//		5'b01011: q = bmi_11;
//		5'b01100: q = bmi_12;
//		5'b01101: q = bmi_13;
//		5'b01110: q = bmi_14;
//		5'b01111: q = bmi_15;
//		5'b10000: q = bmi_16;
//		5'b10001: q = bmi_17;
//		5'b10010: q = bmi_18;
//		5'b10011: q = bmi_19;
//		5'b10100: q = bmi_20;
//		5'b10101: q = bmi_21;
//		5'b10110: q = bmi_22;
//		5'b10111: q = bmi_23;
//		5'b11000: q = bmi_24;
//		5'b11001: q = bmi_25;
//		5'b11010: q = bmi_26;
//		5'b11011: q = bmi_27;
//		5'b11100: q = bmi_28;
//		5'b11101: q = bmi_29;
//		5'b11110: q = bmi_30;
//		5'b11111: q = bmi_31;
	endcase 
end

assign Zregin = q;

endmodule
